@{
    ViewData["Title"] = "Логи системы";
}

<div class="container-fluid admin-page-content">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">
                    <i class="fas fa-file-alt me-2"></i>
                    Логи системы
                </h1>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" id="refreshLogs">
                        <i class="fas fa-sync-alt me-2"></i>Обновить
                    </button>
                    <button class="btn btn-outline-warning" id="clearLogs">
                        <i class="fas fa-trash me-2"></i>Очистить логи
                    </button>
                    <a href="@Url.Action("Index", "Admin")" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>
                        Назад к панели
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Фильтры -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-filter me-2"></i>
                        Фильтры
                    </h5>
                </div>
                <div class="card-body">
                    <form id="logFiltersForm" class="row g-3">
                        <div class="col-md-3">
                            <label for="logLevel" class="form-label">Уровень логирования</label>
                            <select class="form-select" id="logLevel" name="level">
                                <option value="">Все уровни</option>
                                <option value="Trace">Trace</option>
                                <option value="Debug">Debug</option>
                                <option value="Information">Information</option>
                                <option value="Warning">Warning</option>
                                <option value="Error">Error</option>
                                <option value="Critical">Critical</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="dateFrom" class="form-label">Дата с</label>
                            <input type="datetime-local" class="form-control" id="dateFrom" name="dateFrom">
                        </div>
                        <div class="col-md-3">
                            <label for="dateTo" class="form-label">Дата по</label>
                            <input type="datetime-local" class="form-control" id="dateTo" name="dateTo">
                        </div>
                        <div class="col-md-3">
                            <label for="searchText" class="form-label">Поиск по тексту</label>
                            <input type="text" class="form-control" id="searchText" name="search" placeholder="Поиск в логах...">
                        </div>
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-search me-2"></i>Применить фильтры
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="resetFilters">
                                <i class="fas fa-times me-2"></i>Сбросить
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Статистика логов -->
    <div class="row mb-4">
        <div class="col-md-2">
            <div class="card text-center">
                <div class="card-body">
                    <div class="text-muted small">Всего</div>
                    <div class="h4 mb-0" id="totalLogs">-</div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center border-danger">
                <div class="card-body">
                    <div class="text-danger small">Ошибки</div>
                    <div class="h4 mb-0 text-danger" id="errorLogs">-</div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center border-warning">
                <div class="card-body">
                    <div class="text-warning small">Предупреждения</div>
                    <div class="h4 mb-0 text-warning" id="warningLogs">-</div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center border-info">
                <div class="card-body">
                    <div class="text-info small">Информация</div>
                    <div class="h4 mb-0 text-info" id="infoLogs">-</div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center border-secondary">
                <div class="card-body">
                    <div class="text-muted small">Debug</div>
                    <div class="h4 mb-0 text-muted" id="debugLogs">-</div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center border-dark">
                <div class="card-body">
                    <div class="text-dark small">Критические</div>
                    <div class="h4 mb-0 text-dark" id="criticalLogs">-</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Логи -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list me-2"></i>
                        Записи логов
                    </h5>
                    <div class="d-flex gap-2">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="autoRefresh">
                            <label class="form-check-label" for="autoRefresh">
                                Автообновление
                            </label>
                        </div>
                        <select class="form-select form-select-sm" id="pageSize" style="width: auto;">
                            <option value="25">25 записей</option>
                            <option value="50" selected>50 записей</option>
                            <option value="100">100 записей</option>
                            <option value="200">200 записей</option>
                        </select>
                    </div>
                </div>
                <div class="card-body p-0">
                    <!-- Загрузчик -->
                    <div id="logsLoader" class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                        <p class="mt-2 text-muted">Загрузка логов...</p>
                    </div>

                    <!-- Таблица логов -->
                    <div id="logsTable" style="display: none;">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 140px;">Время</th>
                                        <th style="width: 100px;">Уровень</th>
                                        <th style="width: 150px;">Категория</th>
                                        <th>Сообщение</th>
                                        <th style="width: 80px;">Действия</th>
                                    </tr>
                                </thead>
                                <tbody id="logsTableBody">
                                    <!-- Логи будут загружены динамически -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Пустое состояние -->
                    <div id="noLogs" class="text-center py-5" style="display: none;">
                        <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Логи не найдены</h5>
                        <p class="text-muted">Попробуйте изменить фильтры или проверьте настройки логирования</p>
                    </div>
                </div>
                
                <!-- Пагинация -->
                <div class="card-footer">
                    <nav aria-label="Навигация по логам">
                        <ul class="pagination justify-content-center mb-0" id="logsPagination">
                            <!-- Пагинация будет загружена динамически -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно с деталями лога -->
<div class="modal fade" id="logDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Детали записи лога</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="logDetailsContent">
                    <!-- Детали будут загружены динамически -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .log-level-trace { color: #6c757d; }
        .log-level-debug { color: #17a2b8; }
        .log-level-information { color: #28a745; }
        .log-level-warning { color: #ffc107; background-color: #fff3cd; }
        .log-level-error { color: #dc3545; background-color: #f8d7da; }
        .log-level-critical { color: #721c24; background-color: #f5c6cb; font-weight: bold; }
        
        .log-message {
            font-family: 'Courier New', monospace;
            font-size: 0.875rem;
            white-space: pre-wrap;
            word-break: break-word;
        }
        
        .log-category {
            font-size: 0.75rem;
            color: #6c757d;
        }
        
        .log-timestamp {
            font-size: 0.75rem;
            color: #495057;
        }
        
        .table-responsive {
            max-height: 600px;
            overflow-y: auto;
        }
        
        .log-details {
            font-family: 'Courier New', monospace;
            font-size: 0.875rem;
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.375rem;
            white-space: pre-wrap;
            word-break: break-word;
        }
        
        .auto-refresh-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
    </style>
    
    <script>
        class AdminLogs {
            constructor() {
                this.currentPage = 1;
                this.pageSize = 50;
                this.filters = {};
                this.autoRefreshInterval = null;
                this.init();
            }
            
            init() {
                this.bindEvents();
                this.loadLogs();
                this.loadStats();
            }
            
            bindEvents() {
                // Фильтры
                document.getElementById('logFiltersForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.applyFilters();
                });
                
                document.getElementById('resetFilters').addEventListener('click', () => {
                    this.resetFilters();
                });
                
                // Обновление и очистка
                document.getElementById('refreshLogs').addEventListener('click', () => {
                    this.loadLogs();
                    this.loadStats();
                });
                
                document.getElementById('clearLogs').addEventListener('click', () => {
                    this.clearLogs();
                });
                
                // Автообновление
                document.getElementById('autoRefresh').addEventListener('change', (e) => {
                    this.toggleAutoRefresh(e.target.checked);
                });
                
                // Размер страницы
                document.getElementById('pageSize').addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.loadLogs();
                });
            }
            
            applyFilters() {
                const form = document.getElementById('logFiltersForm');
                const formData = new FormData(form);
                
                this.filters = {
                    level: formData.get('level') || '',
                    dateFrom: formData.get('dateFrom') || '',
                    dateTo: formData.get('dateTo') || '',
                    search: formData.get('search') || ''
                };
                
                this.currentPage = 1;
                this.loadLogs();
                this.loadStats();
            }
            
            resetFilters() {
                document.getElementById('logFiltersForm').reset();
                this.filters = {};
                this.currentPage = 1;
                this.loadLogs();
                this.loadStats();
            }
            
            async loadLogs() {
                this.showLoader();
                
                try {
                    // Имитация загрузки логов
                    const logs = this.generateMockLogs();
                    this.renderLogs(logs);
                    this.renderPagination(logs.totalPages);
                    this.hideLoader();
                } catch (error) {
                    console.error('Ошибка загрузки логов:', error);
                    this.showError('Ошибка загрузки логов');
                }
            }
            
            async loadStats() {
                try {
                    // Имитация загрузки статистики
                    const stats = {
                        total: 15420,
                        error: 45,
                        warning: 123,
                        information: 14890,
                        debug: 320,
                        critical: 2
                    };
                    
                    this.renderStats(stats);
                } catch (error) {
                    console.error('Ошибка загрузки статистики:', error);
                }
            }
            
            generateMockLogs() {
                const levels = ['Information', 'Warning', 'Error', 'Debug', 'Critical'];
                const categories = [
                    'AppGambit.Controllers.ApplicationsController',
                    'AppGambit.Controllers.AdminController',
                    'AppGambit.Services.DatabaseFileService',
                    'Microsoft.AspNetCore.Hosting.Diagnostics',
                    'Microsoft.EntityFrameworkCore.Database.Command'
                ];
                
                const messages = [
                    'Пользователь успешно авторизован',
                    'Приложение создано пользователем {UserId}',
                    'Ошибка при загрузке файла: файл слишком большой',
                    'Выполнен запрос к базе данных',
                    'Критическая ошибка подключения к базе данных',
                    'Предупреждение: превышен лимит запросов',
                    'Начато резервное копирование',
                    'Пользователь {UserId} удалил приложение {AppId}'
                ];
                
                const logs = [];
                const now = new Date();
                
                for (let i = 0; i < this.pageSize; i++) {
                    const timestamp = new Date(now.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000);
                    const level = levels[Math.floor(Math.random() * levels.length)];
                    const category = categories[Math.floor(Math.random() * categories.length)];
                    const message = messages[Math.floor(Math.random() * messages.length)];
                    
                    logs.push({
                        id: i + 1,
                        timestamp: timestamp.toISOString(),
                        level,
                        category,
                        message,
                        exception: level === 'Error' || level === 'Critical' ? 'System.Exception: Пример исключения' : null
                    });
                }
                
                return {
                    logs: logs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)),
                    totalPages: Math.ceil(1000 / this.pageSize),
                    currentPage: this.currentPage
                };
            }
            
            renderLogs(data) {
                const tbody = document.getElementById('logsTableBody');
                
                if (data.logs.length === 0) {
                    document.getElementById('logsTable').style.display = 'none';
                    document.getElementById('noLogs').style.display = 'block';
                    return;
                }
                
                document.getElementById('logsTable').style.display = 'block';
                document.getElementById('noLogs').style.display = 'none';
                
                tbody.innerHTML = data.logs.map(log => `
                    <tr class="log-level-${log.level.toLowerCase()}">
                        <td class="log-timestamp">
                            ${new Date(log.timestamp).toLocaleString('ru-RU')}
                        </td>
                        <td>
                            <span class="badge bg-${this.getLevelColor(log.level)}">
                                ${log.level}
                            </span>
                        </td>
                        <td class="log-category">
                            ${log.category.split('.').pop()}
                        </td>
                        <td class="log-message">
                            ${log.message}
                            ${log.exception ? '<br><small class="text-danger">+ Exception details</small>' : ''}
                        </td>
                        <td>
                            <button class="btn btn-sm btn-outline-info" onclick="adminLogs.showLogDetails(${log.id})" title="Подробности">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    </tr>
                `).join('');
            }
            
            renderStats(stats) {
                document.getElementById('totalLogs').textContent = stats.total.toLocaleString();
                document.getElementById('errorLogs').textContent = stats.error.toLocaleString();
                document.getElementById('warningLogs').textContent = stats.warning.toLocaleString();
                document.getElementById('infoLogs').textContent = stats.information.toLocaleString();
                document.getElementById('debugLogs').textContent = stats.debug.toLocaleString();
                document.getElementById('criticalLogs').textContent = stats.critical.toLocaleString();
            }
            
            renderPagination(totalPages) {
                const pagination = document.getElementById('logsPagination');
                
                if (totalPages <= 1) {
                    pagination.innerHTML = '';
                    return;
                }
                
                let html = '';
                
                // Предыдущая страница
                if (this.currentPage > 1) {
                    html += `
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="adminLogs.goToPage(${this.currentPage - 1})">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                    `;
                }
                
                // Страницы
                const startPage = Math.max(1, this.currentPage - 2);
                const endPage = Math.min(totalPages, this.currentPage + 2);
                
                for (let i = startPage; i <= endPage; i++) {
                    html += `
                        <li class="page-item ${i === this.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="adminLogs.goToPage(${i})">${i}</a>
                        </li>
                    `;
                }
                
                // Следующая страница
                if (this.currentPage < totalPages) {
                    html += `
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="adminLogs.goToPage(${this.currentPage + 1})">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    `;
                }
                
                pagination.innerHTML = html;
            }
            
            goToPage(page) {
                this.currentPage = page;
                this.loadLogs();
            }
            
            showLogDetails(logId) {
                // Имитация деталей лога
                const logDetails = {
                    id: logId,
                    timestamp: new Date().toISOString(),
                    level: 'Error',
                    category: 'AppGambit.Controllers.ApplicationsController',
                    message: 'Ошибка при загрузке файла приложения',
                    exception: `System.IO.FileNotFoundException: Файл не найден
   at AppGambit.Services.FileService.LoadFile(String path)
   at AppGambit.Controllers.ApplicationsController.Upload(IFormFile file)`,
                    properties: {
                        UserId: 'user123',
                        FileName: 'app.apk',
                        FileSize: '15MB',
                        RequestId: 'req-456',
                        UserAgent: 'Mozilla/5.0...'
                    }
                };
                
                const content = document.getElementById('logDetailsContent');
                content.innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Основная информация</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td><strong>ID:</strong></td>
                                    <td>${logDetails.id}</td>
                                </tr>
                                <tr>
                                    <td><strong>Время:</strong></td>
                                    <td>${new Date(logDetails.timestamp).toLocaleString('ru-RU')}</td>
                                </tr>
                                <tr>
                                    <td><strong>Уровень:</strong></td>
                                    <td><span class="badge bg-${this.getLevelColor(logDetails.level)}">${logDetails.level}</span></td>
                                </tr>
                                <tr>
                                    <td><strong>Категория:</strong></td>
                                    <td>${logDetails.category}</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Свойства</h6>
                            <table class="table table-sm">
                                ${Object.entries(logDetails.properties).map(([key, value]) => `
                                    <tr>
                                        <td><strong>${key}:</strong></td>
                                        <td>${value}</td>
                                    </tr>
                                `).join('')}
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <h6>Сообщение</h6>
                            <div class="log-details">${logDetails.message}</div>
                        </div>
                    </div>
                    ${logDetails.exception ? `
                        <div class="row">
                            <div class="col-12">
                                <h6>Исключение</h6>
                                <div class="log-details text-danger">${logDetails.exception}</div>
                            </div>
                        </div>
                    ` : ''}
                `;
                
                const modal = new bootstrap.Modal(document.getElementById('logDetailsModal'));
                modal.show();
            }
            
            toggleAutoRefresh(enabled) {
                if (enabled) {
                    this.autoRefreshInterval = setInterval(() => {
                        this.loadLogs();
                        this.loadStats();
                    }, 30000); // Обновление каждые 30 секунд
                    
                    this.showAutoRefreshIndicator();
                } else {
                    if (this.autoRefreshInterval) {
                        clearInterval(this.autoRefreshInterval);
                        this.autoRefreshInterval = null;
                    }
                    
                    this.hideAutoRefreshIndicator();
                }
            }
            
            showAutoRefreshIndicator() {
                const indicator = document.createElement('div');
                indicator.id = 'autoRefreshIndicator';
                indicator.className = 'auto-refresh-indicator';
                indicator.innerHTML = `
                    <div class="alert alert-info alert-sm">
                        <i class="fas fa-sync-alt fa-spin me-2"></i>
                        Автообновление включено
                    </div>
                `;
                document.body.appendChild(indicator);
            }
            
            hideAutoRefreshIndicator() {
                const indicator = document.getElementById('autoRefreshIndicator');
                if (indicator) {
                    indicator.remove();
                }
            }
            
            clearLogs() {
                if (confirm('Вы уверены, что хотите очистить все логи? Это действие нельзя отменить.')) {
                    this.showNotification('Логи очищаются...', 'info');
                    
                    setTimeout(() => {
                        this.showNotification('Логи успешно очищены', 'success');
                        this.loadLogs();
                        this.loadStats();
                    }, 2000);
                }
            }
            
            getLevelColor(level) {
                const colors = {
                    'Trace': 'secondary',
                    'Debug': 'info',
                    'Information': 'success',
                    'Warning': 'warning',
                    'Error': 'danger',
                    'Critical': 'dark'
                };
                return colors[level] || 'secondary';
            }
            
            showLoader() {
                document.getElementById('logsLoader').style.display = 'block';
                document.getElementById('logsTable').style.display = 'none';
                document.getElementById('noLogs').style.display = 'none';
            }
            
            hideLoader() {
                document.getElementById('logsLoader').style.display = 'none';
            }
            
            showError(message) {
                const container = document.getElementById('logsLoader');
                container.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${message}
                    </div>
                `;
            }
            
            showNotification(message, type) {
                const alertClass = type === 'success' ? 'alert-success' : 
                                 type === 'error' ? 'alert-danger' : 
                                 type === 'warning' ? 'alert-warning' : 'alert-info';
                
                const icon = type === 'success' ? 'fa-check-circle' : 
                            type === 'error' ? 'fa-exclamation-circle' : 
                            type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle';
                
                const alert = document.createElement('div');
                alert.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
                alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                alert.innerHTML = `
                    <i class="fas ${icon} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                
                document.body.appendChild(alert);
                
                setTimeout(() => {
                    if (alert.parentNode) {
                        alert.parentNode.removeChild(alert);
                    }
                }, 5000);
            }
        }
        
        // Глобальная переменная для доступа из onclick
        let adminLogs;
        
        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', () => {
            adminLogs = new AdminLogs();
        });
    </script>
}