@model AppGambit.Models.Application
@{
    ViewData["Title"] = Model.Name;
    var userRating = ViewBag.UserRating as AppGambit.Models.Rating;
}

<div class="container mt-4">
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <div class="row">
        <!-- Основная информация -->
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 text-center">
                            @if (!string.IsNullOrEmpty(Model.IconUrl))
                            {
                                <img src="~/@Model.IconUrl" class="img-fluid rounded mb-3" alt="@Model.Name" style="max-height: 150px;">
                            }
                            else
                            {
                                <div class="bg-light rounded d-flex align-items-center justify-content-center mb-3" style="height: 150px;">
                                    <i class="fas fa-desktop fa-4x text-muted"></i>
                                </div>
                            }
                        </div>
                        <div class="col-md-9">
                            <h1 class="h2 mb-2">@Model.Name</h1>
                            <p class="text-muted mb-3">@Model.Description</p>
                            
                            <div class="row g-3 mb-3">
                                <div class="col-sm-6">
                                    <strong>Версия:</strong> @Model.Version
                                </div>
                                <div class="col-sm-6">
                                    <strong>Размер:</strong> @(Model.FileSize / 1024 / 1024) МБ
                                </div>
                                <div class="col-sm-6">
                                    <strong>Категория:</strong> 
                                    @if (!string.IsNullOrEmpty(Model.Category))
                                    {
                                        <span class="badge bg-primary">@Model.Category</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Не указана</span>
                                    }
                                </div>
                                <div class="col-sm-6">
                                    <strong>Скачиваний:</strong> @Model.DownloadCount
                                </div>
                            </div>

                            <!-- Теги -->
                            @if (Model.Tags != null && Model.Tags.Any())
                            {
                                <div class="mb-3">
                                    <strong>Теги:</strong>
                                    <div class="tags-container">
                                        @foreach (var tag in Model.Tags)
                                        {
                                            <a href="@Url.Action("Index", "Applications", new { search = tag })" class="tag">#@tag</a>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Рейтинг -->
                            <div class="d-flex align-items-center mb-3">
                                <div class="rating me-3">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Model.AverageRating)
                                        {
                                            <i class="fas fa-star text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star text-muted"></i>
                                        }
                                    }
                                    <span class="ms-2">@Model.AverageRating.ToString("F1") (@Model.TotalRatings отзывов)</span>
                                </div>
                                <div class="likes-dislikes">
                                    <span class="text-success me-2">
                                        <i class="fas fa-thumbs-up"></i> @Model.LikesCount
                                    </span>
                                    <span class="text-danger">
                                        <i class="fas fa-thumbs-down"></i> @Model.DislikesCount
                                    </span>
                                </div>
                            </div>

                            <!-- Автор -->
                            <div class="mb-3">
                                <strong>Автор:</strong>
                                <a href="/@Model.User.DisplayName" class="text-decoration-none">
                                    @Model.User.DisplayName
                                </a>
                                <small class="text-muted ms-2">@Model.CreatedAt.ToString("dd.MM.yyyy")</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Подробное описание -->
            @if (!string.IsNullOrEmpty(Model.DetailedDescription))
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Описание</h5>
                    </div>
                    <div class="card-body">
                        <p class="mb-0">@Html.Raw(Model.DetailedDescription.Replace("\n", "<br>"))</p>
                    </div>
                </div>
            }

            <!-- Скриншоты -->
            @if (Model.Screenshots != null && Model.Screenshots.Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-images me-2"></i>Скриншоты</h5>
                    </div>
                    <div class="card-body">
                        <div id="screenshotsCarousel" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-inner mb-3">
                                @for (int i = 0; i < Model.Screenshots.Count; i++)
                                {
                                    var screenshot = Model.Screenshots[i];
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="~/@screenshot" class="d-block w-100 rounded shadow-sm"
                                             alt="Скриншот @(i + 1)"
                                             style="max-height: 500px; object-fit: contain; cursor: pointer;"
                                             data-bs-toggle="modal" data-bs-target="#screenshotModal" data-bs-image="/@screenshot" />
                                    </div>
                                }
                            </div>
                            
                            <!-- Индикаторы/миниатюры -->
                            @if (Model.Screenshots.Count > 1)
                            {
                                <div class="carousel-thumbnails d-flex justify-content-center gap-2 mb-3">
                                    @for (int i = 0; i < Model.Screenshots.Count; i++)
                                    {
                                        var screenshot = Model.Screenshots[i];
                                        <div class="thumbnail-item @(i == 0 ? "active" : "")" 
                                             data-bs-target="#screenshotsCarousel" 
                                             data-bs-slide-to="@i">
                                            <img src="~/@screenshot" class="img-thumbnail" 
                                                 style="width: 80px; height: 60px; object-fit: cover; cursor: pointer;" 
                                                 alt="Миниатюра @(i + 1)" />
                                        </div>
                                    }
                                </div>
                            }
                            
                            <button class="carousel-control-prev" type="button" data-bs-target="#screenshotsCarousel" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Предыдущий</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#screenshotsCarousel" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Следующий</span>
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Комментарии -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0" id="comments-header"><i class="fas fa-comments me-2"></i>Комментарии (@Model.Comments.Count)</h5>
                </div>
                <div class="card-body">
                    <!-- Форма добавления комментария -->
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <form id="comment-form" onsubmit="addComment(event)" class="mb-4">
                            <input type="hidden" name="applicationId" value="@Model.Id" />
                            <div class="mb-3">
                                <textarea name="content" class="form-control" rows="3" placeholder="Напишите ваш комментарий..." required maxlength="1000" id="commentTextarea"></textarea>
                                <div class="form-text text-end">
                                    <span id="commentCharCount">0</span>/1000 символов
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary" id="submitCommentBtn">
                                <i class="fas fa-paper-plane me-1"></i>Отправить
                            </button>
                        </form>
                        <hr>
                    }

                    <!-- Список комментариев -->
                    @if (Model.Comments.Any())
                    {
                        @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                        {
                            <div class="comment mb-3 p-3 rounded" id="comment-@comment.Id" style="transition: all 0.3s ease; border: 1px solid transparent;">
                                <div class="d-flex">
                                    <!-- Аватарка -->
                                    <div class="flex-shrink-0 me-3">
                                        @if (!string.IsNullOrEmpty(comment.User.ProfileImageUrl))
                                        {
                                            <img src="~/@comment.User.ProfileImageUrl" class="rounded-circle" alt="@comment.User.DisplayName" style="width: 40px; height: 40px; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <div class="rounded-circle bg-primary d-flex align-items-center justify-content-center text-white" style="width: 40px; height: 40px; font-weight: bold;">
                                                @comment.User.DisplayName.Substring(0, 1).ToUpper()
                                            </div>
                                        }
                                    </div>
                                    
                                    <!-- Содержимое комментария -->
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="d-flex align-items-center">
                                                <strong>@comment.User.DisplayName</strong>
                                                @if (comment.UserId == ViewBag.CurrentUserId)
                                                {
                                                    <span class="badge bg-primary ms-2">Автор</span>
                                                }
                                            </div>
                                            <div class="d-flex align-items-center gap-2">
                                                <small class="text-muted">@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                                                @if (User.Identity?.IsAuthenticated == true && (comment.UserId == ViewBag.CurrentUserId || ViewBag.IsAdmin == true))
                                                {
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                            <i class="fas fa-ellipsis-v"></i>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            @if (comment.UserId == ViewBag.CurrentUserId)
                                                            {
                                                                <li>
                                                                    <button class="dropdown-item" onclick="editComment(@comment.Id, '@Html.Raw(comment.Content.Replace("'", "\\'"))')">
                                                                        <i class="fas fa-edit me-2"></i>Редактировать
                                                                    </button>
                                                                </li>
                                                            }
                                                            <li>
                                                                <button class="dropdown-item text-danger" onclick="deleteComment(@comment.Id)">
                                                                    <i class="fas fa-trash me-2"></i>Удалить
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        
                                        <!-- Содержимое комментария с возможностью сворачивания -->
                                        <div class="comment-content">
                                            @{
                                                var isLongComment = comment.Content.Length > 300;
                                                var shortContent = isLongComment ? comment.Content.Substring(0, 300) + "..." : comment.Content;
                                            }
                                            
                                            @if (isLongComment)
                                            {
                                                <p class="mb-0 comment-text-short">@shortContent</p>
                                                <p class="mb-0 comment-text-full" style="display: none;">@comment.Content</p>
                                                <button class="btn btn-link btn-sm p-0 mt-1 text-primary expand-comment-btn" onclick="toggleComment(@comment.Id)">
                                                    <i class="fas fa-chevron-down me-1"></i>Показать полностью
                                                </button>
                                            }
                                            else
                                            {
                                                <p class="mb-0">@comment.Content</p>
                                            }
                                        </div>
                                        
                                        <!-- Форма редактирования -->
                                        <div class="comment-edit-form" style="display: none;">
                                            <form onsubmit="updateComment(event, @comment.Id)">
                                                <div class="mb-2">
                                                    <textarea class="form-control" rows="3" required maxlength="1000">@comment.Content</textarea>
                                                </div>
                                                <div class="d-flex gap-2">
                                                    <button type="submit" class="btn btn-sm btn-primary">Сохранить</button>
                                                    <button type="button" class="btn btn-sm btn-secondary" onclick="cancelEdit(@comment.Id)">Отмена</button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">
                            <i class="fas fa-comment-slash fa-2x mb-2 d-block"></i>
                            Комментариев пока нет. Будьте первым!
                        </p>
                    }
                </div>
            </div>
        </div>

        <!-- Боковая панель -->
        <div class="col-lg-4">
            <!-- Скачивание -->
            <div class="card mb-4">
                <div class="card-body text-center">
                    <h5 class="card-title">Скачать приложение</h5>
                    <form asp-action="Download" method="post" class="d-grid">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <button type="submit" class="btn btn-success btn-lg">
                            <i class="fas fa-download me-2"></i>Скачать
                        </button>
                    </form>
                    <small class="text-muted mt-2 d-block">
                        Размер: @(Model.FileSize / 1024 / 1024) МБ
                    </small>
                </div>
            </div>

            <!-- Редактирование (только для автора или админа) -->
            @if (User.Identity?.IsAuthenticated == true && (ViewBag.CurrentUserId == Model.UserId || ViewBag.IsAdmin == true))
            {
                <div class="card mb-4">
                    <div class="card-body text-center">
                        <h5 class="card-title">Управление приложением</h5>
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary btn-lg d-grid">
                            <i class="fas fa-edit me-2"></i>Редактировать
                        </a>
                    </div>
                </div>
            }

            <!-- Оценка -->
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">Оценить приложение</h6>
                    </div>
                    <div class="card-body">
                        <form asp-action="Rate" method="post">
                            <input type="hidden" name="applicationId" value="@Model.Id" />
                            
                            <!-- Рейтинг звездами -->
                            <div class="mb-3">
                                <label class="form-label">Рейтинг:</label>
                                <div class="rating-input">
                                    @for (int i = 5; i >= 1; i--)
                                    {
                                        <input type="radio" name="value" value="@i" id="star@i"
                                               @(userRating != null && userRating.Value == i ? "checked" : "") />
                                        <label for="star@i" class="star">
                                            <i class="fas fa-star"></i>
                                        </label>
                                    }
                                </div>
                            </div>

                            <!-- Лайк/Дизлайк -->
                            <div class="mb-3">
                                <label class="form-label">Рекомендация:</label>
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" name="isLike" value="true" id="like" class="btn-check" 
                                           @(userRating != null && userRating.IsLike ? "checked" : "") />
                                    <label for="like" class="btn btn-outline-success">
                                        <i class="fas fa-thumbs-up me-1"></i>Нравится
                                    </label>
                                    
                                    <input type="radio" name="isLike" value="false" id="dislike" class="btn-check" 
                                           @(userRating != null && !userRating.IsLike ? "checked" : "") />
                                    <label for="dislike" class="btn btn-outline-danger">
                                        <i class="fas fa-thumbs-down me-1"></i>Не нравится
                                    </label>
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-star me-1"></i>Оценить
                            </button>
                        </form>
                    </div>
                </div>
            }

            <!-- Информация -->
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Информация</h6>
                </div>
                <div class="card-body">
                    <div class="info-item mb-2">
                        <strong>Добавлено:</strong><br>
                        <small class="text-muted">@Model.CreatedAt.ToString("dd MMMM yyyy")</small>
                    </div>
                    <div class="info-item mb-2">
                        <strong>Обновлено:</strong><br>
                        <small class="text-muted">@Model.UpdatedAt.ToString("dd MMMM yyyy")</small>
                    </div>
                    <div class="info-item">
                        <strong>Всего скачиваний:</strong><br>
                        <small class="text-muted">@Model.DownloadCount</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для скриншотов -->
<div class="modal fade" id="screenshotModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Скриншот</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" class="img-fluid" alt="Скриншот">
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .rating-input {
            display: flex;
            flex-direction: row-reverse;
            justify-content: center;
        }
        
        .rating-input input {
            display: none;
        }
        
        .rating-input label {
            cursor: pointer;
            color: #ddd;
            font-size: 1.5rem;
            margin: 0 2px;
        }
        
        .rating-input label:hover,
        .rating-input label:hover ~ label,
        .rating-input input:checked ~ label {
            color: #ffc107;
        }

        /* Стили для модального окна скриншотов */
        #screenshotModal .modal-title {
            color: #212529;
            font-weight: 600;
        }
        
        #screenshotModal .modal-body {
            background-color: #f8f9fa;
            padding: 2rem;
        }
        
        #screenshotModal .modal-content {
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }
        
        #screenshotModal .modal-header {
            background-color: #fff;
            border-bottom: 1px solid #dee2e6;
            padding: 1rem 1.5rem;
        }
        
        #modalImage {
            max-width: 100%;
            max-height: 70vh;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
    </style>
    
    <script>
        // Обработка модального окна для скриншотов
        document.addEventListener('DOMContentLoaded', function() {
            const screenshotModal = document.getElementById('screenshotModal');
            const modalImage = document.getElementById('modalImage');
            
            screenshotModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                const imageSrc = button.getAttribute('data-bs-image');
                
                modalImage.src = imageSrc;
                modalImage.alt = button.alt || 'Скриншот';
                
                // Добавляем обработку ошибок загрузки изображения
                modalImage.onerror = function() {
                    console.error('Ошибка загрузки изображения:', imageSrc);
                    this.alt = 'Ошибка загрузки изображения';
                    this.style.display = 'none';
                    
                    // Показываем сообщение об ошибке
                    const errorMsg = document.createElement('div');
                    errorMsg.className = 'alert alert-danger text-center';
                    errorMsg.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i>Не удалось загрузить изображение';
                    this.parentNode.appendChild(errorMsg);
                };
                
                modalImage.onload = function() {
                    console.log('Изображение успешно загружено:', imageSrc);
                    this.style.display = 'block';
                    
                    // Удаляем сообщения об ошибках, если они есть
                    const errorMsgs = this.parentNode.querySelectorAll('.alert-danger');
                    errorMsgs.forEach(msg => msg.remove());
                };
            });
        });

        // Обработка миниатюр карусели
        document.addEventListener('DOMContentLoaded', function() {
            var thumbnailItems = document.querySelectorAll('.thumbnail-item');
            if (thumbnailItems.length > 0) {
                thumbnailItems.forEach(function(item) {
                    item.addEventListener('click', function() {
                        // Удаляем класс active у всех миниатюр
                        thumbnailItems.forEach(function(thumb) {
                            thumb.classList.remove('active');
                        });
                        
                        // Добавляем класс active текущей миниатюре
                        this.classList.add('active');
                    });
                });
                
                // Обновляем активную миниатюру при смене слайда
                var carousel = document.getElementById('screenshotsCarousel');
                if (carousel) {
                    carousel.addEventListener('slid.bs.carousel', function(event) {
                        var activeIndex = event.to;
                        
                        // Удаляем класс active у всех миниатюр
                        thumbnailItems.forEach(function(thumb) {
                            thumb.classList.remove('active');
                        });
                        
                        // Добавляем класс active соответствующей миниатюре
                        if (thumbnailItems[activeIndex]) {
                            thumbnailItems[activeIndex].classList.add('active');
                        }
                    });
                }
            }
        });

        // Функции для работы с комментариями
        function editComment(commentId, currentContent) {
            const commentDiv = document.getElementById(`comment-${commentId}`);
            const contentDiv = commentDiv.querySelector('.comment-content');
            const editForm = commentDiv.querySelector('.comment-edit-form');
            const textarea = editForm.querySelector('textarea');
            
            textarea.value = currentContent;
            contentDiv.style.display = 'none';
            editForm.style.display = 'block';
        }

        function cancelEdit(commentId) {
            const commentDiv = document.getElementById(`comment-${commentId}`);
            const contentDiv = commentDiv.querySelector('.comment-content');
            const editForm = commentDiv.querySelector('.comment-edit-form');
            
            contentDiv.style.display = 'block';
            editForm.style.display = 'none';
        }

        async function updateComment(event, commentId) {
            event.preventDefault();
            
            const form = event.target;
            const textarea = form.querySelector('textarea');
            const newContent = textarea.value.trim();
            
            if (!newContent) {
                alert('Комментарий не может быть пустым');
                return;
            }

            try {
                const response = await fetch('@Url.Action("UpdateComment", "Applications")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        commentId: commentId,
                        content: newContent
                    })
                });

                if (response.ok) {
                    const commentDiv = document.getElementById(`comment-${commentId}`);
                    const contentDiv = commentDiv.querySelector('.comment-content p');
                    const editForm = commentDiv.querySelector('.comment-edit-form');
                    
                    contentDiv.textContent = newContent;
                    contentDiv.parentElement.style.display = 'block';
                    editForm.style.display = 'none';
                    
                    showNotification('Комментарий обновлен', 'success');
                } else {
                    throw new Error('Ошибка при обновлении комментария');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Ошибка при обновлении комментария', 'error');
            }
        }

        async function deleteComment(commentId) {
            if (!confirm('Вы уверены, что хотите удалить этот комментарий?')) {
                return;
            }

            // Сохраняем текущую позицию скролла
            const scrollPosition = window.pageYOffset;

            try {
                const response = await fetch('@Url.Action("DeleteComment", "Applications")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        commentId: commentId
                    })
                });

                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);
                
                if (response.ok) {
                    const commentDiv = document.getElementById(`comment-${commentId}`);
                    if (commentDiv) {
                        commentDiv.remove();
                        
                        // Обновляем счетчик комментариев
                        const commentsHeader = document.getElementById('comments-header');
                        console.log('Deleting comment - found header:', commentsHeader);
                        
                        if (commentsHeader) {
                            const match = commentsHeader.textContent.match(/\((\d+)\)/);
                            console.log('Current header text:', commentsHeader.textContent);
                            console.log('Match result:', match);
                            
                            if (match) {
                                const currentCount = parseInt(match[1]);
                                const newCount = Math.max(0, currentCount - 1);
                                commentsHeader.innerHTML = `<i class="fas fa-comments me-2"></i>Комментарии (${newCount})`;
                                console.log('Updated count from', currentCount, 'to', newCount);
                                
                                // Проверяем, остались ли комментарии
                                const remainingComments = document.querySelectorAll('.comment');
                                console.log('Remaining comments:', remainingComments.length);
                                
                                if (remainingComments.length === 0) {
                                    // Показываем сообщение "Комментариев пока нет"
                                    const cardBody = commentsHeader.closest('.card').querySelector('.card-body');
                                    const commentForm = document.getElementById('comment-form');
                                    const noCommentsMessage = `
                                        <p class="text-muted text-center py-3" id="no-comments-message">
                                            <i class="fas fa-comment-slash fa-2x mb-2 d-block"></i>
                                            Комментариев пока нет. Будьте первым!
                                        </p>
                                    `;
                                    
                                    if (commentForm) {
                                        commentForm.insertAdjacentHTML('afterend', noCommentsMessage);
                                    } else if (cardBody) {
                                        cardBody.insertAdjacentHTML('beforeend', noCommentsMessage);
                                    }
                                    console.log('Added no comments message');
                                }
                            }
                        } else {
                            console.error('Comments header not found!');
                        }
                        
                        showNotification('Комментарий удален', 'success');
                        
                        // Восстанавливаем позицию скролла
                        setTimeout(() => {
                            window.scrollTo(0, scrollPosition);
                        }, 100);
                    } else {
                        console.error('Comment div not found:', `comment-${commentId}`);
                        showNotification('Комментарий удален', 'success');
                        
                        // Восстанавливаем позицию скролла
                        setTimeout(() => {
                            window.scrollTo(0, scrollPosition);
                        }, 100);
                    }
                } else {
                    const errorText = await response.text();
                    console.error('Server error:', response.status, errorText);
                    throw new Error(`Ошибка сервера: ${response.status}`);
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Ошибка при удалении комментария', 'error');
            }
        }

        function showNotification(message, type) {
            // Создаем или находим контейнер для уведомлений
            let notificationContainer = document.getElementById('notification-container');
            if (!notificationContainer) {
                notificationContainer = document.createElement('div');
                notificationContainer.id = 'notification-container';
                notificationContainer.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 10000; display: flex; flex-direction: column-reverse; gap: 10px; pointer-events: none;';
                document.body.appendChild(notificationContainer);
            }
            
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
            notification.style.cssText = 'min-width: 300px; padding-bottom: 0; pointer-events: auto; margin: 0; transform: translateX(100%); transition: transform 0.3s ease-out;';
            notification.innerHTML = `
                <div style="padding: 12px 40px 8px 16px; display: flex; align-items: center; text-align: center; min-height: 40px;">
                    <span style="flex: 1;">${message}</span>
                    <button type="button" class="btn-close" onclick="removeNotification(this)" style="position: absolute; top: 8px; right: 8px;"></button>
                </div>
                <div class="progress" style="height: 4px; border-radius: 0 0 6px 6px;">
                    <div class="progress-bar bg-${type === 'success' ? 'success' : 'danger'}" role="progressbar" style="width: 100%; transition: width 10s linear;"></div>
                </div>
            `;
            
            notificationContainer.appendChild(notification);
            
            // Анимация появления
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 10);
            
            // Запускаем анимацию progress bar
            setTimeout(() => {
                const progressBar = notification.querySelector('.progress-bar');
                if (progressBar) {
                    progressBar.style.width = '0%';
                }
            }, 100);
            
            // Удаляем уведомление через 10 секунд с анимацией
            setTimeout(() => {
                removeNotification(notification);
            }, 10000);
        }
        
        function removeNotification(element) {
            const notification = element.closest ? element.closest('.alert') : element;
            if (notification && notification.parentElement) {
                notification.style.transition = 'opacity 0.5s ease-out, transform 0.5s ease-out';
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                        
                        // Удаляем контейнер, если он пустой
                        const container = document.getElementById('notification-container');
                        if (container && container.children.length === 0) {
                            container.remove();
                        }
                    }
                }, 500);
            }
        }

        // Счетчик символов для комментариев
        document.addEventListener('DOMContentLoaded', function() {
            const commentTextarea = document.getElementById('commentTextarea');
            const charCount = document.getElementById('commentCharCount');
            
            if (commentTextarea && charCount) {
                function updateCharCount() {
                    const currentLength = commentTextarea.value.length;
                    charCount.textContent = currentLength;
                    
                    if (currentLength > 950) {
                        charCount.style.color = 'red';
                    } else if (currentLength > 800) {
                        charCount.style.color = 'orange';
                    } else {
                        charCount.style.color = '';
                    }
                }
                
                commentTextarea.addEventListener('input', updateCharCount);
                updateCharCount(); // Инициализация
            }
        });

        // Функция для создания HTML комментария
        function createCommentHtml(content, displayName, date, userId, commentId, profileImageUrl = null) {
            const isLongComment = content.length > 300;
            const shortContent = isLongComment ? content.substring(0, 300) + "..." : content;
            const currentUserId = '@ViewBag.CurrentUserId';
            const isCurrentUser = userId === currentUserId;
            
            const avatarHtml = profileImageUrl ?
                `<img src="/${profileImageUrl}" class="rounded-circle" alt="${displayName}" style="width: 40px; height: 40px; object-fit: cover;">` :
                `<div class="rounded-circle bg-primary d-flex align-items-center justify-content-center text-white" style="width: 40px; height: 40px; font-weight: bold;">
                    ${displayName.substring(0, 1).toUpperCase()}
                </div>`;
            
            return `
                <div class="comment mb-3 p-3 rounded" id="comment-${commentId}" style="transition: all 0.3s ease; border: 1px solid transparent;">
                    <div class="d-flex">
                        <div class="flex-shrink-0 me-3">
                            ${avatarHtml}
                        </div>
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="d-flex align-items-center">
                                    <strong>${displayName}</strong>
                                    ${isCurrentUser ? '<span class="badge bg-primary ms-2">Автор</span>' : ''}
                                </div>
                                <div class="d-flex align-items-center gap-2">
                                    <small class="text-muted">${date}</small>
                                    ${isCurrentUser ? `
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <button class="dropdown-item" onclick="editComment('${commentId}', '${content.replace(/'/g, "\\'")}')">
                                                        <i class="fas fa-edit me-2"></i>Редактировать
                                                    </button>
                                                </li>
                                                <li>
                                                    <button class="dropdown-item text-danger" onclick="deleteComment('${commentId}')">
                                                        <i class="fas fa-trash me-2"></i>Удалить
                                                    </button>
                                                </li>
                                            </ul>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                            <div class="comment-content">
                                ${isLongComment ? `
                                    <p class="mb-0 comment-text-short">${shortContent}</p>
                                    <p class="mb-0 comment-text-full" style="display: none;">${content}</p>
                                    <button class="btn btn-link btn-sm p-0 mt-1 text-primary expand-comment-btn" onclick="toggleComment('${commentId}')">
                                        <i class="fas fa-chevron-down me-1"></i>Показать полностью
                                    </button>
                                ` : `
                                    <p class="mb-0">${content}</p>
                                `}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Функция для добавления комментария через AJAX
        async function addComment(event) {
            event.preventDefault();
            
            const form = event.target;
            const submitBtn = document.getElementById('submitCommentBtn');
            const textarea = document.getElementById('commentTextarea');
            const content = textarea.value.trim();
            const applicationId = form.querySelector('input[name="applicationId"]').value;
            
            if (!content) {
                showNotification('Комментарий не может быть пустым', 'error');
                return;
            }
            
            if (content.length > 1000) {
                showNotification('Комментарий не может быть длиннее 1000 символов', 'error');
                return;
            }
            
            // Блокируем кнопку отправки
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Отправка...';
            
            try {
                const response = await fetch('@Url.Action("AddComment", "Applications")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        applicationId: parseInt(applicationId),
                        content: content
                    })
                });
                
                if (response.ok) {
                    const responseData = await response.json();
                    
                    // Очищаем форму
                    textarea.value = '';
                    document.getElementById('commentCharCount').textContent = '0';
                    
                    // Показываем уведомление
                    showNotification('Комментарий успешно добавлен', 'success');
                    
                    // Обновляем счетчик комментариев
                    const commentsHeader = document.getElementById('comments-header');
                    console.log('Adding comment - found header:', commentsHeader);
                    
                    if (commentsHeader) {
                        const match = commentsHeader.textContent.match(/\((\d+)\)/);
                        console.log('Current header text:', commentsHeader.textContent);
                        console.log('Match result:', match);
                        
                        if (match) {
                            const currentCount = parseInt(match[1]);
                            const newCount = currentCount + 1;
                            commentsHeader.innerHTML = `<i class="fas fa-comments me-2"></i>Комментарии (${newCount})`;
                            console.log('Updated count from', currentCount, 'to', newCount);
                        } else {
                            // Если нет скобок, значит счетчик равен 0
                            commentsHeader.innerHTML = `<i class="fas fa-comments me-2"></i>Комментарии (1)`;
                            console.log('No match found, setting count to 1');
                        }
                    } else {
                        console.error('Comments header not found!');
                    }
                    
                    // Создаем новый элемент комментария используя данные из ответа сервера
                    const commentData = responseData.comment;
                    const createdAt = new Date(commentData.createdAt);
                    const formattedDate = createdAt.toLocaleDateString('ru-RU', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    
                    const newCommentHtml = createCommentHtml(
                        commentData.content,
                        commentData.user.displayName,
                        formattedDate,
                        commentData.user.id,
                        commentData.id,
                        commentData.user.profileImageUrl
                    );
                    
                    // Удаляем сообщение "Комментариев пока нет", если оно есть
                    const noCommentsMessage = document.getElementById('no-comments-message') ||
                                            document.querySelector('.text-muted.text-center.py-3:has(.fa-comment-slash)') ||
                                            Array.from(document.querySelectorAll('.text-muted.text-center.py-3')).find(el => el.textContent.includes('Комментариев пока нет'));
                    if (noCommentsMessage) {
                        noCommentsMessage.remove();
                    }
                    
                    // Находим форму комментариев и добавляем новый комментарий сразу после неё
                    const commentForm = document.getElementById('comment-form');
                    if (commentForm) {
                        commentForm.insertAdjacentHTML('afterend', newCommentHtml);
                    }
                } else {
                    const errorData = await response.json();
                    showNotification(errorData.message || 'Ошибка при добавлении комментария', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Ошибка при добавлении комментария', 'error');
            } finally {
                // Разблокируем кнопку
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-paper-plane me-1"></i>Отправить';
            }
        }

        // Функция для сворачивания/разворачивания комментариев
        function toggleComment(commentId) {
            const commentDiv = document.getElementById(`comment-${commentId}`);
            const shortText = commentDiv.querySelector('.comment-text-short');
            const fullText = commentDiv.querySelector('.comment-text-full');
            const expandBtn = commentDiv.querySelector('.expand-comment-btn');
            
            if (shortText.style.display === 'none') {
                // Сворачиваем
                shortText.style.display = 'block';
                fullText.style.display = 'none';
                expandBtn.innerHTML = '<i class="fas fa-chevron-down me-1"></i>Показать полностью';
            } else {
                // Разворачиваем
                shortText.style.display = 'none';
                fullText.style.display = 'block';
                expandBtn.innerHTML = '<i class="fas fa-chevron-up me-1"></i>Свернуть';
            }
        }

        // Функция для исправления путей к аватаркам при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            // Исправляем пути к аватаркам в существующих комментариях
            const avatarImages = document.querySelectorAll('.comment img[src*="~/"');
            avatarImages.forEach(img => {
                const currentSrc = img.getAttribute('src');
                if (currentSrc && currentSrc.startsWith('~/')) {
                    img.setAttribute('src', currentSrc.replace('~/', '/'));
                }
            });

            // Добавляем обработчик ошибок для аватарок
            const allAvatarImages = document.querySelectorAll('.comment img.rounded-circle');
            allAvatarImages.forEach(img => {
                img.addEventListener('error', function() {
                    // Если изображение не загрузилось, заменяем его на инициалы
                    const displayName = this.getAttribute('alt') || 'U';
                    const initial = displayName.substring(0, 1).toUpperCase();
                    
                    // Создаем div с инициалами
                    const avatarDiv = document.createElement('div');
                    avatarDiv.className = 'rounded-circle bg-primary d-flex align-items-center justify-content-center text-white';
                    avatarDiv.style.cssText = 'width: 40px; height: 40px; font-weight: bold;';
                    avatarDiv.textContent = initial;
                    
                    // Заменяем изображение на div
                    this.parentNode.replaceChild(avatarDiv, this);
                });
            });
        });
    </script>

    <style>
        .comment:hover {
            border-color: #007bff !important;
            box-shadow: 0 0 0 1px rgba(0, 123, 255, 0.2);
        }
        
        .expand-comment-btn {
            text-decoration: none !important;
            font-size: 0.875rem;
        }
        
        .expand-comment-btn:hover {
            text-decoration: underline !important;
        }
        
        /* Стили для уведомлений */
        #notification-container {
            max-width: 400px;
        }
        
        #notification-container .alert {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border: none;
            will-change: transform, opacity;
        }
        
        body {
            overflow-x: hidden;
        }
    </style>
}