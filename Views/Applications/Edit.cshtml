@model AppGambit.ViewModels.EditApplicationViewModel
@{
    ViewData["Title"] = "Редактировать приложение";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">
                        <i class="fas fa-edit me-2"></i>Редактировать приложение
                    </h3>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post" enctype="multipart/form-data">
                        <input type="hidden" asp-for="Id" />
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <!-- Основная информация -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h5 class="border-bottom pb-2 mb-3">Основная информация</h5>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="Name" class="form-label">Название приложения *</label>
                                <input asp-for="Name" class="form-control" placeholder="Введите название приложения" />
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="Version" class="form-label">Версия *</label>
                                <input asp-for="Version" class="form-control" placeholder="1.0.0" />
                                <span asp-validation-for="Version" class="text-danger"></span>
                            </div>
                            
                            <div class="col-12 mb-3">
                                <label asp-for="Description" class="form-label">Краткое описание *</label>
                                <textarea asp-for="Description" class="form-control" rows="3" 
                                          placeholder="Краткое описание приложения (до 500 символов)"></textarea>
                                <span asp-validation-for="Description" class="text-danger"></span>
                                <div class="form-text">Максимум 500 символов</div>
                            </div>
                            
                            <div class="col-12 mb-3">
                                <label asp-for="DetailedDescription" class="form-label">Подробное описание</label>
                                <textarea asp-for="DetailedDescription" class="form-control" rows="6" 
                                          placeholder="Подробное описание функций, особенностей и возможностей приложения"></textarea>
                                <span asp-validation-for="DetailedDescription" class="text-danger"></span>
                                <div class="form-text">Максимум 2000 символов</div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="Category" class="form-label">Категория</label>
                                <select asp-for="Category" class="form-select">
                                    <option value="">Выберите категорию</option>
                                    <option value="Игры">Игры</option>
                                    <option value="Утилиты">Утилиты</option>
                                    <option value="Образование">Образование</option>
                                    <option value="Бизнес">Бизнес</option>
                                    <option value="Графика">Графика</option>
                                    <option value="Мультимедиа">Мультимедиа</option>
                                    <option value="Разработка">Разработка</option>
                                    <option value="Безопасность">Безопасность</option>
                                    <option value="Интернет">Интернет</option>
                                    <option value="Системные">Системные</option>
                                    <option value="Другое">Другое</option>
                                </select>
                                <span asp-validation-for="Category" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="TagsString" class="form-label">Теги</label>
                                <input type="text" id="tags" class="form-control"
                                       placeholder="Введите теги через запятую" />
                                <div class="form-text">Например: игра, аркада, 2D</div>
                                <div id="tagsContainer" class="mt-2"></div>
                                <input type="hidden" asp-for="TagsString" id="tagsHidden" />
                                <span asp-validation-for="TagsString" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Файлы -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h5 class="border-bottom pb-2 mb-3">Файлы</h5>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="IconFile" class="form-label">Иконка приложения</label>
                                @if (!string.IsNullOrEmpty(Model.CurrentIconUrl))
                                {
                                    <div class="mb-2">
                                        <img src="@Model.CurrentIconUrl" class="img-thumbnail"
                                             style="max-width: 100px; max-height: 100px;" alt="Текущая иконка">
                                        <div class="form-text">Текущая иконка</div>
                                    </div>
                                }
                                <input asp-for="IconFile" type="file" id="iconFile" class="form-control"
                                       accept="image/*,.ico" />
                                <div class="form-text">Рекомендуемый размер: 128x128 пикселей. Форматы: JPG, PNG, GIF, ICO</div>
                                <div id="iconPreview" class="mt-2"></div>
                                <span asp-validation-for="IconFile" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="AppFile" class="form-label">Файл приложения</label>
                                @if (!string.IsNullOrEmpty(Model.CurrentDownloadUrl))
                                {
                                    <div class="mb-2">
                                        <div class="alert alert-info">
                                            <i class="fas fa-file me-2"></i>
                                            Текущий файл загружен
                                        </div>
                                    </div>
                                }
                                <input asp-for="AppFile" type="file" id="appFile" class="form-control"
                                       accept=".exe,.msi,.zip,.rar,.7z,.apk" />
                                <div class="form-text">Поддерживаемые форматы: EXE, MSI, ZIP, RAR, 7Z, APK (необязательно)</div>
                                <div id="fileInfo" class="mt-2"></div>
                                <span asp-validation-for="AppFile" class="text-danger"></span>
                            </div>
                            
                            <div class="col-12 mb-3">
                                <label class="form-label">Текущие скриншоты</label>
                                @if (Model.CurrentScreenshots != null && Model.CurrentScreenshots.Any())
                                {
                                    <div id="currentScreenshots" class="row g-2 mb-3">
                                        @for (int i = 0; i < Model.CurrentScreenshots.Count; i++)
                                        {
                                            var screenshotUrl = Model.CurrentScreenshots[i];
                                            var index = i;
                                            <div class="col-md-3 col-sm-4 col-6 screenshot-item" data-index="@index" data-url="@screenshotUrl">
                                                <div class="position-relative">
                                                    <img src="@screenshotUrl" class="img-thumbnail w-100"
                                                         alt="Скриншот @(index + 1)" style="height: 100px; object-fit: cover; cursor: move;">
                                                    <div class="position-absolute top-0 end-0 p-1">
                                                        <button type="button" class="btn btn-danger btn-xs"
                                                                onclick="markScreenshotForDeletion('@screenshotUrl', this)"
                                                                title="Удалить"
                                                                style="font-size: 0.7rem; padding: 0.2rem 0.4rem;">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                    <div class="position-absolute bottom-0 start-0 bg-dark text-white px-2 py-1 small">
                                                        <span class="screenshot-number">@(index + 1)</span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <!-- Скрытое поле для сохранения порядка скриншотов -->
                                    <input type="hidden" id="screenshotsOrder" name="ScreenshotsOrder" value="" />
                                }
                                
                                <label asp-for="Screenshots" class="form-label">Добавить новые скриншоты</label>
                                <input asp-for="Screenshots" type="file" id="screenshots" class="form-control"
                                       accept="image/*" multiple />
                                <div class="form-text">Можно загрузить несколько изображений. Форматы: JPG, PNG, GIF, ICO</div>
                                <div id="screenshotsPreview" class="mt-2 row g-2"></div>
                                <span asp-validation-for="Screenshots" class="text-danger"></span>
                                
                                <!-- Скрытые поля для удаления скриншотов -->
                                <div id="screenshotsToDeleteContainer"></div>
                            </div>
                        </div>

                        <!-- Кнопки -->
                        <div class="d-flex justify-content-between">
                            <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-1"></i>Отмена
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i>Сохранить изменения
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const tagsInput = document.getElementById('tags');
            const tagsContainer = document.getElementById('tagsContainer');
            const tagsHidden = document.getElementById('tagsHidden');
            const iconFile = document.getElementById('iconFile');
            const iconPreview = document.getElementById('iconPreview');
            const appFile = document.getElementById('appFile');
            const fileInfo = document.getElementById('fileInfo');
            const screenshots = document.getElementById('screenshots');
            const screenshotsPreview = document.getElementById('screenshotsPreview');
            const currentScreenshots = document.getElementById('currentScreenshots');
            
            let tags = [];
            let screenshotsToDelete = [];
            let existingScreenshots = [];
            
            // Инициализация существующих скриншотов
            @if (Model.CurrentScreenshots != null && Model.CurrentScreenshots.Any())
            {
                <text>
                existingScreenshots = @Html.Raw(Json.Serialize(Model.CurrentScreenshots));
                </text>
            }

            // Инициализация существующих тегов
            const existingTags = '@Html.Raw(Model.TagsString ?? "")';
            if (existingTags) {
                tags = existingTags.split(',').map(t => t.trim()).filter(t => t);
                updateTagsDisplay();
            }

            // Обработка тегов
            tagsInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' || e.key === ',') {
                    e.preventDefault();
                    addTag();
                }
            });

            tagsInput.addEventListener('blur', addTag);

            function addTag() {
                const value = tagsInput.value.trim();
                if (value && !tags.includes(value)) {
                    tags.push(value);
                    updateTagsDisplay();
                    tagsInput.value = '';
                }
            }

            function removeTag(tag) {
                tags = tags.filter(t => t !== tag);
                updateTagsDisplay();
            }

            function updateTagsDisplay() {
                tagsContainer.innerHTML = tags.map(tag =>
                    `<span class="tag tag-primary tag-removable">
                        ${tag}
                        <button type="button" class="tag-remove" onclick="removeTag('${tag}')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>`
                ).join('');
                tagsHidden.value = tags.join(',');
            }

            // Глобальная функция для удаления тегов
            window.removeTag = removeTag;

            // Предпросмотр иконки
            iconFile.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        iconPreview.innerHTML = `
                            <img src="${e.target.result}" class="img-thumbnail" 
                                 style="max-width: 100px; max-height: 100px;" alt="Предпросмотр иконки">
                        `;
                    };
                    reader.readAsDataURL(file);
                } else {
                    iconPreview.innerHTML = '';
                }
            });

            // Информация о файле приложения
            appFile.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const sizeMB = (file.size / 1024 / 1024).toFixed(2);
                    fileInfo.innerHTML = `
                        <div class="alert alert-info">
                            <i class="fas fa-file me-2"></i>
                            <strong>${file.name}</strong><br>
                            Размер: ${sizeMB} МБ
                        </div>
                    `;
                } else {
                    fileInfo.innerHTML = '';
                }
            });

            // Предпросмотр новых скриншотов
            let screenshotFiles = [];
            
            screenshots.addEventListener('change', function(e) {
                screenshotFiles = Array.from(e.target.files);
                updateScreenshotsPreview();
            });
            
            
            function removeNewScreenshot(index) {
                screenshotFiles.splice(index, 1);
                updateScreenshotsPreview();
            }
            
            function updateFileInput() {
                const dt = new DataTransfer();
                screenshotFiles.forEach(file => dt.items.add(file));
                screenshots.files = dt.files;
            }

            // Функция для пометки скриншота на удаление
            window.markScreenshotForDeletion = function(screenshotUrl, button) {
                const container = button.closest('.col-md-3, .col-sm-4, .col-6');
                container.style.opacity = '0.5';
                button.innerHTML = '<i class="fas fa-undo"></i>';
                button.title = 'Отменить удаление';
                button.onclick = function() { unmarkScreenshotForDeletion(screenshotUrl, button, container); };
                
                screenshotsToDelete.push(screenshotUrl);
                updateScreenshotsToDeleteInputs();
            };

            // Функция для отмены удаления скриншота
            window.unmarkScreenshotForDeletion = function(screenshotUrl, button, container) {
                container.style.opacity = '1';
                button.innerHTML = '<i class="fas fa-times"></i>';
                button.title = 'Удалить';
                button.onclick = function() { markScreenshotForDeletion(screenshotUrl, button); };
                
                screenshotsToDelete = screenshotsToDelete.filter(url => url !== screenshotUrl);
                updateScreenshotsToDeleteInputs();
            };

            function updateScreenshotsToDeleteInputs() {
                const container = document.getElementById('screenshotsToDeleteContainer');
                container.innerHTML = '';
                screenshotsToDelete.forEach((url, index) => {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = `ScreenshotsToDelete[${index}]`;
                    input.value = url;
                    container.appendChild(input);
                });
            }
            
            // Функция для перемещения существующих скриншотов
            window.moveExistingScreenshot = function(fromIndex, toIndex) {
                if (toIndex >= 0 && toIndex < existingScreenshots.length) {
                    // Меняем местами элементы в массиве
                    const temp = existingScreenshots[fromIndex];
                    existingScreenshots[fromIndex] = existingScreenshots[toIndex];
                    existingScreenshots[toIndex] = temp;
                    
                    // Обновляем отображение
                    updateExistingScreenshotsDisplay();
                }
            };
            
            function updateExistingScreenshotsDisplay() {
                if (!currentScreenshots) return;
                
                currentScreenshots.innerHTML = '';
                existingScreenshots.forEach((url, index) => {
                    const col = document.createElement('div');
                    col.className = 'col-md-3 col-sm-4 col-6 screenshot-item';
                    col.setAttribute('data-index', index);
                    col.setAttribute('data-url', url);
                    col.setAttribute('draggable', 'true');
                    
                    const isMarkedForDeletion = screenshotsToDelete.includes(url);
                    const opacity = isMarkedForDeletion ? '0.5' : '1';
                    
                    col.innerHTML = `
                        <div class="position-relative">
                            <img src="${url}" class="img-thumbnail w-100"
                                 alt="Скриншот ${index + 1}" style="height: 100px; object-fit: cover; cursor: move; opacity: ${opacity};">
                            <div class="position-absolute top-0 end-0 p-1">
                                <button type="button" class="btn btn-danger btn-xs"
                                        onclick="${isMarkedForDeletion ? `unmarkScreenshotForDeletion('${url}', this)` : `markScreenshotForDeletion('${url}', this)`}"
                                        title="${isMarkedForDeletion ? 'Отменить удаление' : 'Удалить'}"
                                        style="font-size: 0.7rem; padding: 0.2rem 0.4rem;">
                                    <i class="fas fa-${isMarkedForDeletion ? 'undo' : 'times'}"></i>
                                </button>
                            </div>
                            <div class="position-absolute bottom-0 start-0 bg-dark text-white px-2 py-1 small">
                                <span class="screenshot-number">${index + 1}</span>
                            </div>
                        </div>
                    `;
                    
                    currentScreenshots.appendChild(col);
                });
                
                // Обновляем скрытое поле с порядком скриншотов
                updateScreenshotsOrder();
                
                // Инициализируем drag and drop
                initDragAndDrop();
            }
            
            function updateScreenshotsOrder() {
                const orderInput = document.getElementById('screenshotsOrder');
                if (orderInput) {
                    orderInput.value = existingScreenshots.join(',');
                }
            }
            
            // Переопределяем функции для работы с удалением
            window.markScreenshotForDeletion = function(screenshotUrl, button) {
                if (!screenshotsToDelete.includes(screenshotUrl)) {
                    screenshotsToDelete.push(screenshotUrl);
                }
                updateExistingScreenshotsDisplay();
                updateScreenshotsToDeleteInputs();
            };

            window.unmarkScreenshotForDeletion = function(screenshotUrl, button) {
                screenshotsToDelete = screenshotsToDelete.filter(url => url !== screenshotUrl);
                updateExistingScreenshotsDisplay();
                updateScreenshotsToDeleteInputs();
            };
            
            // Drag and Drop функциональность
            let draggedElement = null;
            let draggedIndex = null;
            let draggedType = null; // 'existing' или 'new'
            
            function initDragAndDrop() {
                // Для существующих скриншотов
                const existingItems = currentScreenshots?.querySelectorAll('.screenshot-item');
                existingItems?.forEach((item, index) => {
                    item.addEventListener('dragstart', handleDragStart);
                    item.addEventListener('dragover', handleDragOver);
                    item.addEventListener('drop', handleDrop);
                    item.addEventListener('dragend', handleDragEnd);
                    item.addEventListener('dragenter', handleDragEnter);
                    item.addEventListener('dragleave', handleDragLeave);
                });
                
                // Для новых скриншотов
                const newItems = screenshotsPreview?.querySelectorAll('.screenshot-new-item');
                newItems?.forEach((item, index) => {
                    item.setAttribute('draggable', 'true');
                    item.addEventListener('dragstart', handleDragStart);
                    item.addEventListener('dragover', handleDragOver);
                    item.addEventListener('drop', handleDrop);
                    item.addEventListener('dragend', handleDragEnd);
                    item.addEventListener('dragenter', handleDragEnter);
                    item.addEventListener('dragleave', handleDragLeave);
                });
            }
            
            function handleDragStart(e) {
                draggedElement = this;
                draggedIndex = parseInt(this.getAttribute('data-index'));
                draggedType = this.classList.contains('screenshot-new-item') ? 'new' : 'existing';
                
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', this.innerHTML);
                
                this.style.opacity = '0.4';
            }
            
            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault();
                }
                e.dataTransfer.dropEffect = 'move';
                return false;
            }
            
            function handleDragEnter(e) {
                this.classList.add('drag-over');
            }
            
            function handleDragLeave(e) {
                this.classList.remove('drag-over');
            }
            
            function handleDrop(e) {
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
                
                const targetIndex = parseInt(this.getAttribute('data-index'));
                const targetType = this.classList.contains('screenshot-new-item') ? 'new' : 'existing';
                
                // Перемещаем только если это элементы одного типа
                if (draggedType === targetType && draggedElement !== this) {
                    if (draggedType === 'existing') {
                        // Перемещаем существующий скриншот
                        const draggedUrl = existingScreenshots[draggedIndex];
                        existingScreenshots.splice(draggedIndex, 1);
                        
                        if (targetIndex > draggedIndex) {
                            existingScreenshots.splice(targetIndex - 1, 0, draggedUrl);
                        } else {
                            existingScreenshots.splice(targetIndex, 0, draggedUrl);
                        }
                        
                        updateExistingScreenshotsDisplay();
                    } else if (draggedType === 'new') {
                        // Перемещаем новый скриншот
                        const draggedFile = screenshotFiles[draggedIndex];
                        screenshotFiles.splice(draggedIndex, 1);
                        
                        if (targetIndex > draggedIndex) {
                            screenshotFiles.splice(targetIndex - 1, 0, draggedFile);
                        } else {
                            screenshotFiles.splice(targetIndex, 0, draggedFile);
                        }
                        
                        updateScreenshotsPreview();
                    }
                }
                
                this.classList.remove('drag-over');
                return false;
            }
            
            function handleDragEnd(e) {
                this.style.opacity = '1';
                
                // Удаляем все классы drag-over
                document.querySelectorAll('.drag-over').forEach(el => {
                    el.classList.remove('drag-over');
                });
            }
            
            // Обновляем функцию предпросмотра новых скриншотов
            function updateScreenshotsPreview() {
                screenshotsPreview.innerHTML = '';
                
                screenshotFiles.forEach((file, index) => {
                    if (file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const col = document.createElement('div');
                            col.className = 'col-md-3 col-sm-4 col-6 mb-2 screenshot-new-item';
                            col.setAttribute('data-index', index);
                            col.setAttribute('draggable', 'true');
                            col.innerHTML = `
                                <div class="position-relative">
                                    <img src="${e.target.result}" class="img-thumbnail w-100"
                                         alt="Новый скриншот ${index + 1}" style="height: 100px; object-fit: cover; cursor: move;">
                                    <div class="position-absolute top-0 end-0 p-1">
                                        <button type="button" class="btn btn-danger btn-xs"
                                                onclick="removeNewScreenshot(${index})"
                                                title="Удалить"
                                                style="font-size: 0.7rem; padding: 0.2rem 0.4rem;">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="position-absolute bottom-0 start-0 bg-success text-white px-2 py-1 small">
                                        Новый ${index + 1}
                                    </div>
                                </div>
                            `;
                            screenshotsPreview.appendChild(col);
                            
                            // Инициализируем drag and drop после добавления элемента
                            if (index === screenshotFiles.length - 1) {
                                initDragAndDrop();
                            }
                        };
                        reader.readAsDataURL(file);
                    }
                });
                
                updateFileInput();
            }
            
            // Глобальные функции
            window.removeNewScreenshot = removeNewScreenshot;
            
            // Инициализация при загрузке
            if (existingScreenshots.length > 0) {
                updateExistingScreenshotsDisplay();
            }
        });
    </script>
}